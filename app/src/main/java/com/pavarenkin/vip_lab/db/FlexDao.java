package com.pavarenkin.vip_lab.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.pavarenkin.vip_lab.domain.converters.ActionConverter;
import com.pavarenkin.vip_lab.domain.converters.KindConverter;
import com.pavarenkin.vip_lab.domain.converters.StateConverter;
import com.pavarenkin.vip_lab.domain.converters.StatusConverter;
import com.pavarenkin.vip_lab.domain.enums.Action;
import com.pavarenkin.vip_lab.domain.enums.Kind;
import com.pavarenkin.vip_lab.domain.enums.State;
import com.pavarenkin.vip_lab.domain.enums.Status;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FLEX".
*/
public class FlexDao extends AbstractDao<Flex, Long> {

    public static final String TABLENAME = "FLEX";

    /**
     * Properties of entity Flex.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Kind = new Property(1, String.class, "kind", false, "KIND");
        public final static Property State = new Property(2, String.class, "state", false, "STATE");
        public final static Property Action = new Property(3, String.class, "action", false, "ACTION");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
        public final static Property ParentId = new Property(5, Long.class, "parentId", false, "PARENT_ID");
        public final static Property PictureId = new Property(6, Long.class, "pictureId", false, "PICTURE_ID");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property Caption = new Property(8, String.class, "caption", false, "CAPTION");
        public final static Property Code = new Property(9, String.class, "code", false, "CODE");
        public final static Property Url = new Property(10, String.class, "url", false, "URL");
        public final static Property Hash = new Property(11, String.class, "hash", false, "HASH");
        public final static Property Audio = new Property(12, String.class, "audio", false, "AUDIO");
        public final static Property Json = new Property(13, String.class, "json", false, "JSON");
        public final static Property Icon = new Property(14, Integer.class, "icon", false, "ICON");
        public final static Property Number = new Property(15, Integer.class, "number", false, "NUMBER");
        public final static Property Image = new Property(16, Integer.class, "image", false, "IMAGE");
        public final static Property Color = new Property(17, Integer.class, "color", false, "COLOR");
        public final static Property FontColor = new Property(18, Integer.class, "fontColor", false, "FONT_COLOR");
        public final static Property ValuCcolor = new Property(19, Integer.class, "valuCcolor", false, "VALU_CCOLOR");
        public final static Property Knowledge = new Property(20, Integer.class, "knowledge", false, "KNOWLEDGE");
        public final static Property Training = new Property(21, Integer.class, "training", false, "TRAINING");
        public final static Property Education = new Property(22, Integer.class, "education", false, "EDUCATION");
        public final static Property Experience = new Property(23, Integer.class, "experience", false, "EXPERIENCE");
        public final static Property Favorite = new Property(24, Integer.class, "favorite", false, "FAVORITE");
        public final static Property Sound = new Property(25, Integer.class, "sound", false, "SOUND");
        public final static Property Date = new Property(26, java.util.Date.class, "date", false, "DATE");
    }

    private DaoSession daoSession;

    private final KindConverter kindConverter = new KindConverter();
    private final StateConverter stateConverter = new StateConverter();
    private final ActionConverter actionConverter = new ActionConverter();
    private final StatusConverter statusConverter = new StatusConverter();
    private Query<Flex> flex_ChildrenQuery;

    public FlexDao(DaoConfig config) {
        super(config);
    }
    
    public FlexDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FLEX\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KIND\" TEXT NOT NULL ," + // 1: kind
                "\"STATE\" TEXT NOT NULL ," + // 2: state
                "\"ACTION\" TEXT NOT NULL ," + // 3: action
                "\"STATUS\" TEXT NOT NULL ," + // 4: status
                "\"PARENT_ID\" INTEGER," + // 5: parentId
                "\"PICTURE_ID\" INTEGER," + // 6: pictureId
                "\"NAME\" TEXT," + // 7: name
                "\"CAPTION\" TEXT," + // 8: caption
                "\"CODE\" TEXT," + // 9: code
                "\"URL\" TEXT," + // 10: url
                "\"HASH\" TEXT," + // 11: hash
                "\"AUDIO\" TEXT," + // 12: audio
                "\"JSON\" TEXT," + // 13: json
                "\"ICON\" INTEGER," + // 14: icon
                "\"NUMBER\" INTEGER," + // 15: number
                "\"IMAGE\" INTEGER," + // 16: image
                "\"COLOR\" INTEGER," + // 17: color
                "\"FONT_COLOR\" INTEGER," + // 18: fontColor
                "\"VALU_CCOLOR\" INTEGER," + // 19: valuCcolor
                "\"KNOWLEDGE\" INTEGER," + // 20: knowledge
                "\"TRAINING\" INTEGER," + // 21: training
                "\"EDUCATION\" INTEGER," + // 22: education
                "\"EXPERIENCE\" INTEGER," + // 23: experience
                "\"FAVORITE\" INTEGER," + // 24: favorite
                "\"SOUND\" INTEGER," + // 25: sound
                "\"DATE\" INTEGER);"); // 26: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FLEX\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Flex entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, kindConverter.convertToDatabaseValue(entity.getKind()));
        stmt.bindString(3, stateConverter.convertToDatabaseValue(entity.getState()));
        stmt.bindString(4, actionConverter.convertToDatabaseValue(entity.getAction()));
        stmt.bindString(5, statusConverter.convertToDatabaseValue(entity.getStatus()));
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(6, parentId);
        }
 
        Long pictureId = entity.getPictureId();
        if (pictureId != null) {
            stmt.bindLong(7, pictureId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String caption = entity.getCaption();
        if (caption != null) {
            stmt.bindString(9, caption);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(10, code);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(11, url);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(12, hash);
        }
 
        String audio = entity.getAudio();
        if (audio != null) {
            stmt.bindString(13, audio);
        }
 
        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(14, json);
        }
 
        Integer icon = entity.getIcon();
        if (icon != null) {
            stmt.bindLong(15, icon);
        }
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(16, number);
        }
 
        Integer image = entity.getImage();
        if (image != null) {
            stmt.bindLong(17, image);
        }
 
        Integer color = entity.getColor();
        if (color != null) {
            stmt.bindLong(18, color);
        }
 
        Integer fontColor = entity.getFontColor();
        if (fontColor != null) {
            stmt.bindLong(19, fontColor);
        }
 
        Integer valuCcolor = entity.getValuCcolor();
        if (valuCcolor != null) {
            stmt.bindLong(20, valuCcolor);
        }
 
        Integer knowledge = entity.getKnowledge();
        if (knowledge != null) {
            stmt.bindLong(21, knowledge);
        }
 
        Integer training = entity.getTraining();
        if (training != null) {
            stmt.bindLong(22, training);
        }
 
        Integer education = entity.getEducation();
        if (education != null) {
            stmt.bindLong(23, education);
        }
 
        Integer experience = entity.getExperience();
        if (experience != null) {
            stmt.bindLong(24, experience);
        }
 
        Integer favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(25, favorite);
        }
 
        Integer sound = entity.getSound();
        if (sound != null) {
            stmt.bindLong(26, sound);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(27, date.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Flex entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, kindConverter.convertToDatabaseValue(entity.getKind()));
        stmt.bindString(3, stateConverter.convertToDatabaseValue(entity.getState()));
        stmt.bindString(4, actionConverter.convertToDatabaseValue(entity.getAction()));
        stmt.bindString(5, statusConverter.convertToDatabaseValue(entity.getStatus()));
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(6, parentId);
        }
 
        Long pictureId = entity.getPictureId();
        if (pictureId != null) {
            stmt.bindLong(7, pictureId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String caption = entity.getCaption();
        if (caption != null) {
            stmt.bindString(9, caption);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(10, code);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(11, url);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(12, hash);
        }
 
        String audio = entity.getAudio();
        if (audio != null) {
            stmt.bindString(13, audio);
        }
 
        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(14, json);
        }
 
        Integer icon = entity.getIcon();
        if (icon != null) {
            stmt.bindLong(15, icon);
        }
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(16, number);
        }
 
        Integer image = entity.getImage();
        if (image != null) {
            stmt.bindLong(17, image);
        }
 
        Integer color = entity.getColor();
        if (color != null) {
            stmt.bindLong(18, color);
        }
 
        Integer fontColor = entity.getFontColor();
        if (fontColor != null) {
            stmt.bindLong(19, fontColor);
        }
 
        Integer valuCcolor = entity.getValuCcolor();
        if (valuCcolor != null) {
            stmt.bindLong(20, valuCcolor);
        }
 
        Integer knowledge = entity.getKnowledge();
        if (knowledge != null) {
            stmt.bindLong(21, knowledge);
        }
 
        Integer training = entity.getTraining();
        if (training != null) {
            stmt.bindLong(22, training);
        }
 
        Integer education = entity.getEducation();
        if (education != null) {
            stmt.bindLong(23, education);
        }
 
        Integer experience = entity.getExperience();
        if (experience != null) {
            stmt.bindLong(24, experience);
        }
 
        Integer favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(25, favorite);
        }
 
        Integer sound = entity.getSound();
        if (sound != null) {
            stmt.bindLong(26, sound);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(27, date.getTime());
        }
    }

    @Override
    protected final void attachEntity(Flex entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Flex readEntity(Cursor cursor, int offset) {
        Flex entity = new Flex( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            kindConverter.convertToEntityProperty(cursor.getString(offset + 1)), // kind
            stateConverter.convertToEntityProperty(cursor.getString(offset + 2)), // state
            actionConverter.convertToEntityProperty(cursor.getString(offset + 3)), // action
            statusConverter.convertToEntityProperty(cursor.getString(offset + 4)), // status
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // parentId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // pictureId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // caption
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // code
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // url
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // hash
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // audio
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // json
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // icon
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // number
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // image
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // color
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // fontColor
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // valuCcolor
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // knowledge
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // training
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // education
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // experience
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // favorite
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // sound
            cursor.isNull(offset + 26) ? null : new java.util.Date(cursor.getLong(offset + 26)) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Flex entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKind(kindConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setState(stateConverter.convertToEntityProperty(cursor.getString(offset + 2)));
        entity.setAction(actionConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setStatus(statusConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setParentId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setPictureId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCaption(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHash(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAudio(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setJson(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIcon(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setNumber(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setImage(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setColor(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setFontColor(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setValuCcolor(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setKnowledge(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setTraining(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setEducation(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setExperience(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setFavorite(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setSound(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setDate(cursor.isNull(offset + 26) ? null : new java.util.Date(cursor.getLong(offset + 26)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Flex entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Flex entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Flex entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "children" to-many relationship of Flex. */
    public List<Flex> _queryFlex_Children(Long parentId) {
        synchronized (this) {
            if (flex_ChildrenQuery == null) {
                QueryBuilder<Flex> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentId.eq(null));
                flex_ChildrenQuery = queryBuilder.build();
            }
        }
        Query<Flex> query = flex_ChildrenQuery.forCurrentThread();
        query.setParameter(0, parentId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFlexDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getFlexPictureDao().getAllColumns());
            builder.append(" FROM FLEX T");
            builder.append(" LEFT JOIN FLEX T0 ON T.\"PARENT_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN FLEX_PICTURE T1 ON T.\"PICTURE_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Flex loadCurrentDeep(Cursor cursor, boolean lock) {
        Flex entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Flex parent = loadCurrentOther(daoSession.getFlexDao(), cursor, offset);
        entity.setParent(parent);
        offset += daoSession.getFlexDao().getAllColumns().length;

        FlexPicture flexPicture = loadCurrentOther(daoSession.getFlexPictureDao(), cursor, offset);
        entity.setFlexPicture(flexPicture);

        return entity;    
    }

    public Flex loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Flex> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Flex> list = new ArrayList<Flex>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Flex> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Flex> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
