package com.pavarenkin.vip_lab.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pavarenkin.vip_lab.domain.converters.ActionConverter;
import com.pavarenkin.vip_lab.domain.converters.KindConverter;
import com.pavarenkin.vip_lab.domain.converters.StateConverter;
import com.pavarenkin.vip_lab.domain.converters.StatusConverter;
import com.pavarenkin.vip_lab.domain.enums.Action;
import com.pavarenkin.vip_lab.domain.enums.Kind;
import com.pavarenkin.vip_lab.domain.enums.State;
import com.pavarenkin.vip_lab.domain.enums.Status;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FLEX_STATE".
*/
public class FlexStateDao extends AbstractDao<FlexState, Long> {

    public static final String TABLENAME = "FLEX_STATE";

    /**
     * Properties of entity FlexState.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Kind = new Property(1, String.class, "kind", false, "KIND");
        public final static Property State = new Property(2, String.class, "state", false, "STATE");
        public final static Property Action = new Property(3, String.class, "action", false, "ACTION");
        public final static Property Status = new Property(4, String.class, "status", false, "STATUS");
        public final static Property Date = new Property(5, java.util.Date.class, "date", false, "DATE");
        public final static Property DateFrom = new Property(6, java.util.Date.class, "dateFrom", false, "DATE_FROM");
        public final static Property DateTo = new Property(7, java.util.Date.class, "dateTo", false, "DATE_TO");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
        public final static Property Caption = new Property(9, String.class, "caption", false, "CAPTION");
        public final static Property Code = new Property(10, String.class, "code", false, "CODE");
        public final static Property Json = new Property(11, String.class, "json", false, "JSON");
    }

    private final KindConverter kindConverter = new KindConverter();
    private final StateConverter stateConverter = new StateConverter();
    private final ActionConverter actionConverter = new ActionConverter();
    private final StatusConverter statusConverter = new StatusConverter();

    public FlexStateDao(DaoConfig config) {
        super(config);
    }
    
    public FlexStateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FLEX_STATE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KIND\" TEXT NOT NULL ," + // 1: kind
                "\"STATE\" TEXT NOT NULL ," + // 2: state
                "\"ACTION\" TEXT NOT NULL ," + // 3: action
                "\"STATUS\" TEXT NOT NULL ," + // 4: status
                "\"DATE\" INTEGER," + // 5: date
                "\"DATE_FROM\" INTEGER," + // 6: dateFrom
                "\"DATE_TO\" INTEGER," + // 7: dateTo
                "\"NAME\" TEXT," + // 8: name
                "\"CAPTION\" TEXT," + // 9: caption
                "\"CODE\" TEXT," + // 10: code
                "\"JSON\" TEXT);"); // 11: json
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FLEX_STATE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FlexState entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, kindConverter.convertToDatabaseValue(entity.getKind()));
        stmt.bindString(3, stateConverter.convertToDatabaseValue(entity.getState()));
        stmt.bindString(4, actionConverter.convertToDatabaseValue(entity.getAction()));
        stmt.bindString(5, statusConverter.convertToDatabaseValue(entity.getStatus()));
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date.getTime());
        }
 
        java.util.Date dateFrom = entity.getDateFrom();
        if (dateFrom != null) {
            stmt.bindLong(7, dateFrom.getTime());
        }
 
        java.util.Date dateTo = entity.getDateTo();
        if (dateTo != null) {
            stmt.bindLong(8, dateTo.getTime());
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String caption = entity.getCaption();
        if (caption != null) {
            stmt.bindString(10, caption);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(11, code);
        }
 
        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(12, json);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FlexState entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, kindConverter.convertToDatabaseValue(entity.getKind()));
        stmt.bindString(3, stateConverter.convertToDatabaseValue(entity.getState()));
        stmt.bindString(4, actionConverter.convertToDatabaseValue(entity.getAction()));
        stmt.bindString(5, statusConverter.convertToDatabaseValue(entity.getStatus()));
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date.getTime());
        }
 
        java.util.Date dateFrom = entity.getDateFrom();
        if (dateFrom != null) {
            stmt.bindLong(7, dateFrom.getTime());
        }
 
        java.util.Date dateTo = entity.getDateTo();
        if (dateTo != null) {
            stmt.bindLong(8, dateTo.getTime());
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String caption = entity.getCaption();
        if (caption != null) {
            stmt.bindString(10, caption);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(11, code);
        }
 
        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(12, json);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FlexState readEntity(Cursor cursor, int offset) {
        FlexState entity = new FlexState( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            kindConverter.convertToEntityProperty(cursor.getString(offset + 1)), // kind
            stateConverter.convertToEntityProperty(cursor.getString(offset + 2)), // state
            actionConverter.convertToEntityProperty(cursor.getString(offset + 3)), // action
            statusConverter.convertToEntityProperty(cursor.getString(offset + 4)), // status
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // date
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // dateFrom
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // dateTo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // caption
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // code
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // json
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FlexState entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKind(kindConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setState(stateConverter.convertToEntityProperty(cursor.getString(offset + 2)));
        entity.setAction(actionConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setStatus(statusConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setDateFrom(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setDateTo(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCaption(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setJson(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FlexState entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FlexState entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FlexState entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
